import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;

class Player {
    public int position;
    public int score = 0;

    public Player(int pos) {
        position = pos;
        score = 0;
    }

    public void addScore(int add) {
        score += add;
    }

    public int getScore() {
        return score;
    }

    public void turn(int one, int two, int three) {
        position += one + two + three;
        if (position > 10) {
            if (position % 10 == 0) {
                position = 10;
            } else {
                position = position % 10;
            }

        }
        score += position;
    }
}

class Dice {
    public static int value = 1;
    public static int roll_count = 0;

    public Dice() {
        value = 1;
        roll_count = 0;
    }

    public int getRollCount() {
        return roll_count;
    }

    public int roll() {
        int result = value;
        value++;
        roll_count++;
        if (value > 100) {
            value = 1;
        }
        return result;
    }
}



public class App {
    //states elements are int arrays that store [p1 pos, p1 score, p2 pos, p2 score]
    public static ArrayList<int[]> states = new ArrayList<int[]>();
    public static ArrayList<Integer> states_count = new ArrayList<Integer>();
    public static ArrayList<int[]> new_states = new ArrayList<int[]>();
    public static ArrayList<Integer> new_states_count = new ArrayList<Integer>();


 

    public static void main(String[] args) throws Exception {
        // String file = "src/input.txt";
        Boolean is_running = true;
        int loser_score = 0;
        Player p1 = new Player(8);
        Player p2 = new Player(1);
        Dice dice = new Dice();
        int roll1, roll2, roll3;

        System.out.println("PART 1");
        while (is_running) {
            roll1 = dice.roll();
            roll2 = dice.roll();
            roll3 = dice.roll();
            p1.turn(roll1, roll2, roll3);
            if (p1.getScore() >= 1000) {
                is_running = false;
                loser_score = p2.getScore();
                break;
            }
            roll1 = dice.roll();
            roll2 = dice.roll();
            roll3 = dice.roll();
            p2.turn(roll1, roll2, roll3);
            if (p2.getScore() >= 1000) {
                is_running = false;
                loser_score = p1.getScore();
                break;
            }

        }

        System.out.println("Player 1 score: " + p1.getScore());
        System.out.println("Player 2 score: " + p2.getScore());

        int roll_count = dice.getRollCount();
        System.out.println("Loser Score: " + loser_score + " Roll count: " + roll_count);
        System.out.println("Result: " + (loser_score * roll_count));

        System.out.println("PART 2");
        is_running = true;
        int[] initial ={4,0,8,0};
        states.add(initial);
        int p1Wins =0, p2Wins =0;
        while(!states.isEmpty()){
            for (int[] state : states) {
                for(int i=3; i<=9; i++){
                    for(int j=3; j<=9; j++){
                        int[] new_state = new int[4];
                        int p1NewPos = state[0] + i;

                        
                        new_state[0] = p1NewPos;
                        new_state[1] += p1NewPos;
                        if(new_state[1] >= 21){
                            int index = states.indexOf(state);
                            p1Wins += states_count.get(index);


                        }
                    }
                }
            }
        }

    }
}
