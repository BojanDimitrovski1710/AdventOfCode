import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class App {

    public static List<Character> foundCharacters = new ArrayList<Character>();
    public static List<Long> foundCharactersCount = new ArrayList<Long>();
    public static List<String> pairs = new ArrayList<String>();
    public static List<Long> pairsCount = new ArrayList<Long>();
    public static List<String> new_pairs = new ArrayList<String>();
    public static List<Long> new_pairsCount = new ArrayList<Long>();
    public static List<String> rulesList1 = new ArrayList<String>();
    public static List<String> rulesList2 = new ArrayList<String>();

    public static long findMax() {
        Long max = Long.MIN_VALUE;
        for (int i = 0; i < foundCharactersCount.size(); i++) {
            if (foundCharactersCount.get(i) > max) {
                max = foundCharactersCount.get(i);
            }
        }

        return max;
    }

    public static long findMin() {
        Long min = Long.MAX_VALUE;
        for (int i = 0; i < foundCharactersCount.size(); i++) {
            if (foundCharactersCount.get(i) < min) {
                min = foundCharactersCount.get(i);
            }
        }
        return min;
    }

    public static void getLetterCount(Stack<Character> stack) {
        Stack<Character> temp = new Stack<Character>();
        temp.addAll(stack);
        while (!temp.isEmpty()) {
            char currChar = temp.pop();
            parseCharacter(currChar);
        }
    }

    public static void parsePair(String s) {
        int index;
        if (new_pairs.contains(s)) {
            index = new_pairs.indexOf(s);
            new_pairsCount.set(index, new_pairsCount.get(index) + 1);
        } else {
            new_pairs.add(s);
            long one = 1;
            new_pairsCount.add(one);
        }

    }

    public static void parseCharacter(char currChar) {
        if (!foundCharacters.contains(currChar)) {
            foundCharacters.add(currChar);
            long one = 1;
            foundCharactersCount.add(one);
        } else {
            int index = foundCharacters.indexOf(currChar);
            foundCharactersCount.set(index, foundCharactersCount.get(index) + 1);
        }
    }

    public static void getLetterCount(List<Character> list) {
        for (int i = 0; i < list.size(); i++) {
            char currChar = list.get(i);
            parseCharacter(currChar);
        }
    }

    public static void switchArrays() {
        pairs.clear();
        pairs.addAll(new_pairs);

        pairsCount.clear();
        pairsCount.addAll(new_pairsCount);
        new_pairsCount.clear();
        for (int i = 0; i < pairsCount.size(); i++) {
            long zero = 0;
            new_pairsCount.add(zero);
        }

    }

    public static void doStep() {
        for (int i = 0; i < pairs.size(); i++) {

            if (pairsCount.get(i) > 0) {
                String pair = pairs.get(i);
                if (rulesList1.contains(pair)) {
                    char firstChar = pair.charAt(0);
                    char secondChar = pair.charAt(1);
                    int index = rulesList1.indexOf(pair);
                    String insert = rulesList2.get(index);

                    String newPair1 = "" + firstChar + insert;
                    String newPair2 = "" + insert + secondChar;

                    parsePair(newPair1);
                    parsePair(newPair2);
                    parseCharacter(insert.charAt(0));

                    long factor = pairsCount.get(i);

                    index = new_pairs.indexOf(newPair1);
                    new_pairsCount.set(index, new_pairsCount.get(index) + factor - 1);
                    index = new_pairs.indexOf(newPair2);
                    new_pairsCount.set(index, new_pairsCount.get(index) + factor - 1);
                    index = foundCharacters.indexOf(insert.charAt(0));
                    foundCharactersCount.set(index, foundCharactersCount.get(index) + factor - 1);
                    long zero = 0;
                    pairsCount.set(i, zero);

                }

            }
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader("src/input.txt"));
        Scanner sc = new Scanner(System.in);
        String input = br.readLine();

        Stack<Character> resultStack = new Stack<Character>();
        // read and parse the initial sequence
        for (int i = 0; i < input.length(); i++) {
            resultStack.add(input.charAt(i));
        }

        // count the initial pairs
        for (int i = 1; i < resultStack.size(); i++) {
            String pair = "" + resultStack.get(i - 1) + resultStack.get(i);
            parsePair(pair);
        }
        switchArrays();

        // read and parse how many steps we need to do
        int steps = Integer.parseInt(br.readLine());

        // read and parse the rules
        while ((input = br.readLine()) != null) {
            String[] split = input.split(" -> ");
            rulesList1.add(split[0]);
            rulesList2.add(split[1]);
        }

        System.out.println("Rules List: ");
        for (int i = 0; i < rulesList1.size(); i++) {
            System.out.println(rulesList1.get(i) + " -> " + rulesList2.get(i));
        }

        getLetterCount(resultStack);
        for (int j = 1; j <= steps; j++) {
            System.out.println("Step " + j);
            doStep();
            switchArrays();
            System.out.println(pairs);
            System.out.println(pairsCount);
        }

        long max = findMax();
        long min = findMin();
        System.out.println("Most common count: " + max);
        System.out.println("Least common count: " + min);
        System.out.println("After subtraction: " + (max - min));
        br.close();
    }
}
