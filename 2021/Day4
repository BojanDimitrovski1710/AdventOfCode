import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.List;

public class App {
    // states elements are int arrays that store [p1 pos, p1 score, p2 pos, p2
    // score]
    public static int width = 5;
    public static int height = 5;

    public static ArrayList<int[][]> boards = new ArrayList<int[][]>();
    public static ArrayList<int[][]> result_boards = new ArrayList<int[][]>();

    public static int[][] fillBoard(int[][] board) {
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                board[i][j] = 0;
            }
        }
        return board;
    }

    public static void printBoard(int[][] board) {
        System.out.println();
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                System.out.print(board[i][j]);
                System.out.print(" ");
            }
            System.out.println();
        }
    }

    public static void checkNumber(int index, int target) {
        int[][] matrix = boards.get(index);
        int[][] result_matrix = result_boards.get(index);
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (matrix[i][j] == target) {
                    result_matrix[i][j] = 1;
                }
            }
        }
        result_boards.set(index, result_matrix);
    }

    public static Boolean hasBingo(int index) {
        int[][] result_board = result_boards.get(index);
        boolean hasBingo = true;
        for (int i = 0; i < width; i++) {
            hasBingo = true;
            for (int j = 0; j < height; j++) {
                if (result_board[i][j] != 1) {
                    hasBingo = false;
                    break;
                }
            }
            if (hasBingo)
                return true;
        }
        for (int i = 0; i < width; i++) {
            hasBingo = true;
            for (int j = 0; j < height; j++) {
                if (result_board[j][i] != 1) {
                    hasBingo = false;
                    break;
                }
            }
            if (hasBingo)
                return true;
        }
        return false;
    }

    public static int getUnmarkedSum(int index) {
        int[][] matrix = boards.get(index);
        int[][] result_matrix = result_boards.get(index);
        int result = 0;
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                if (result_matrix[i][j] != 1) {
                    result += matrix[i][j];
                }
            }
        }
        return result;
    }

    public static void main(String[] args) throws Exception {
        String file = "src/input.txt";

        BufferedReader br = new BufferedReader(new FileReader(file));

        String callout = br.readLine();
        String[] numbers = callout.split(",");
        String line = "";
        while ((line = br.readLine()) != null) {
            if (line.equals("")) {
                int[][] matrix = new int[height][width];
                int[][] result_matrix = new int[height][width];
                result_matrix = fillBoard(result_matrix);
                for (int i = 0; i < height; i++) {
                    String[] nums = br.readLine().split(" ");
                    int offset = 0;
                    for (int j = 0; j < nums.length; j++) {
                        if (nums[j].equals("")) {
                            offset++;
                        } else {
                            matrix[i][j - offset] = Integer.parseInt(nums[j]);
                        }

                    }
                }
                boards.add(matrix);
                result_boards.add(result_matrix);
            }
        }
        boolean is_running = true;
        long result = 0;
        for (int i = 0; i < numbers.length && is_running; i++) {
            int target = Integer.parseInt(numbers[i]);
            for (int index = 0; index < boards.size() && is_running; index++) {
                checkNumber(index, target);
                if (hasBingo(index)) {
                    if (boards.size() != 1) {
                        boards.remove(index);
                        result_boards.remove(index);
                        index--;
                    } else {
                        int unmarkedSum = getUnmarkedSum(index);
                        result = unmarkedSum * target;
                        is_running = false;
                        break;
                    }

                }
            }
        }

        System.out.println("Result: " + result);

    }

}
